<?php
/*
 *  Copyright 2023.  Baks.dev <admin@baks.dev>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is furnished
 *  to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

declare(strict_types=1);

namespace BaksDev\Products\Stocks\Messenger\Orders;

use BaksDev\Orders\Order\Entity\Event\OrderEvent;
use BaksDev\Orders\Order\Entity\Products\OrderProduct;
use BaksDev\Orders\Order\Messenger\OrderMessage;
use BaksDev\Orders\Order\Type\Status\OrderStatus\OrderStatusCanceled;
use BaksDev\Orders\Order\Type\Status\OrderStatus\OrderStatusCompleted;
use BaksDev\Orders\Order\UseCase\Admin\Canceled\OrderCanceledDTO;
use BaksDev\Products\Product\Entity\Offers\Variation\Modification\Quantity\ProductModificationQuantity;
use BaksDev\Products\Product\Entity\Offers\Variation\Quantity\ProductVariationQuantity;
use BaksDev\Products\Product\Repository\CurrentQuantity\CurrentQuantityByEventInterface;
use BaksDev\Products\Product\Repository\CurrentQuantity\Modification\CurrentQuantityByModificationInterface;
use BaksDev\Products\Product\Repository\CurrentQuantity\Offer\CurrentQuantityByOfferInterface;
use BaksDev\Products\Product\Repository\CurrentQuantity\Variation\CurrentQuantityByVariationInterface;
use BaksDev\Products\Stocks\Entity\Event\ProductStockEvent;
use BaksDev\Products\Stocks\Repository\ProductStocksByOrder\ProductStocksByOrderInterface;
use BaksDev\Products\Stocks\UseCase\Admin\Cancel\CancelProductStockDTO;
use BaksDev\Products\Stocks\UseCase\Admin\Cancel\CancelProductStockHandler;
use BaksDev\Users\Profile\UserProfile\Type\Id\UserProfileUid;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;

#[AsMessageHandler]
final class CancelProductStocksByOrderCancel
{
    private EntityManagerInterface $entityManager;

    private CurrentQuantityByModificationInterface $quantityByModification;

    private CurrentQuantityByVariationInterface $quantityByVariation;

    private CurrentQuantityByOfferInterface $quantityByOffer;

    private CurrentQuantityByEventInterface $quantityByEvent;
    private LoggerInterface $logger;
    private ProductStocksByOrderInterface $productStocksByOrder;
    private CancelProductStockHandler $cancelProductStockHandler;


    public function __construct(
        EntityManagerInterface $entityManager,
        CurrentQuantityByModificationInterface $quantityByModification,
        CurrentQuantityByVariationInterface $quantityByVariation,
        CurrentQuantityByOfferInterface $quantityByOffer,
        CurrentQuantityByEventInterface $quantityByEvent,
        LoggerInterface $ordersOrderLogger,

        ProductStocksByOrderInterface $productStocksByOrder,
        CancelProductStockHandler $cancelProductStockHandler,


    )
    {
        $this->entityManager = $entityManager;
        $this->entityManager->clear();

        $this->quantityByModification = $quantityByModification;
        $this->quantityByVariation = $quantityByVariation;
        $this->quantityByOffer = $quantityByOffer;
        $this->quantityByEvent = $quantityByEvent;
        $this->logger = $ordersOrderLogger;
        $this->productStocksByOrder = $productStocksByOrder;
        $this->cancelProductStockHandler = $cancelProductStockHandler;
    }


    /** Снимаем резерв с продукции при отмене заказа  */
    public function __invoke(OrderMessage $message): void
    {
        /**
         * Событие заказа
         *
         * @var OrderEvent $OrderEvent
         */
        $OrderEvent = $this->entityManager->getRepository(OrderEvent::class)->find($message->getEvent());

        /** Если статус не Canceled «Отменен» - завершаем обработчик */
        if(!$OrderEvent || !$OrderEvent->getStatus()->equals(OrderStatusCanceled::class))
        {
            return;
        }

        if($message->getLast())
        {
            /**
             * Предыдущее событие заказа
             *
             * @var OrderEvent $OrderEventLast
             */
            $OrderEventLast = $this->entityManager->getRepository(OrderEvent::class)->find($message->getLast());

            /** Если статус предыдущего события Completed «Выполнен» - завершаем обработчик  */
            if($OrderEventLast->getStatus()->equals(OrderStatusCompleted::class))
            {
                return;
            }
        }


        $OrderCanceledDTO = new OrderCanceledDTO(new UserProfileUid());
        $OrderEvent->getDto($OrderCanceledDTO);


        /** Получаем складскую заявку по заказу и делаем отмену */

        $productStocks = $this->productStocksByOrder->findByOrder($OrderEvent->getMain());

        if($productStocks)
        {
            /** @var ProductStockEvent $ProductStockEvent */
            foreach($productStocks as $ProductStockEvent)
            {
                $CancelProductStockDTO = new CancelProductStockDTO();
                $ProductStockEvent->getDto($CancelProductStockDTO);

                $CancelProductStockDTO->setComment($OrderCanceledDTO->getComment());
                $this->cancelProductStockHandler->handle($CancelProductStockDTO);
            }
        }

    }

}